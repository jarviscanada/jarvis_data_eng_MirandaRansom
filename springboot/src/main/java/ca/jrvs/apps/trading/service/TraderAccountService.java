package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.domain.TraderAccountView;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class TraderAccountService {

  private TraderDao traderDao;
  private AccountDao accountDao;
  private PositionDao positionDao;
  private SecurityOrderDao securityOrderDao;

  @Autowired
  public TraderAccountService(TraderDao traderDao, AccountDao accountDao,
      PositionDao positionDao, SecurityOrderDao securityOrderDao) {
    this.traderDao = traderDao;
    this.accountDao = accountDao;
    this.positionDao = positionDao;
    this.securityOrderDao = securityOrderDao;
  }

  /**
   * Create a new trader and initialize a new account with 0 amount
   * Assumption: to simplify the logic, each trader has only one account where traderId == accountId
   *
   * @param trader cannot be null. All fields cannot be null except for id (auto-generated by db)
   * @return traderAccountView
   * @throws IllegalArgumentException if a trader has null fields or id is not null
   */
  public TraderAccountView createTraderAndAccount(Trader trader) {
    if (trader.getFirst_name() == null || trader.getLast_name() == null ||
    trader.getCountry() == null || trader.getDob() == null || trader.getEmail() == null) {
      throw new IllegalArgumentException("No fields but Id can be null in provided trader");
    }

    //save new trader
    Trader newTrader = traderDao.save(trader);

    //create and save empty account under trader
    Account newAccount = new Account();
    newAccount.setTrader_id(newTrader.getId());
    newAccount.setId(newTrader.getId());
    newAccount.setAmount(0d);
    accountDao.save(newAccount);

    return new TraderAccountView(newTrader, newAccount);
  }

  /**
   * A trader can be deleted iff it has no open position and 0 cash balance
   *
   * @param traderId must not be null
   * @throws IllegalArgumentException if traderId is null or not found or unable to delete
   */
  public void deleteTraderById(Integer traderId) {
    if (traderId == null) {
      throw new IllegalArgumentException("Trader id cannot be null");
    }

    Optional<Account> optionalAccount = accountDao.findById(traderId);
    if (!optionalAccount.isPresent()){
      throw new IllegalArgumentException("Account cannot be found for trader id: " + traderId);
    }
    Double accountAmount = optionalAccount.get().getAmount();
    Boolean hasOpenPosition = positionDao.exsistsById(traderId.toString());

    if (accountAmount != 0 || hasOpenPosition) {
      throw new IllegalArgumentException("Cannot delete due to open position or a non-zero account balance");
    }

    securityOrderDao.deleteById(traderId);
    accountDao.deleteById(traderId);
    traderDao.deleteById(traderId);
  }

  /**
   * Deposit a fund to an account by traderId
   *
   * @param traderId must not be null
   * @param fund must be greater than 0
   * @return updated Account
   * @throws IllegalArgumentException if traderId is null or not found,
   * amd fund is less or equal to 0
   */
  public Account deposit(Integer traderId, Double fund) {
    if (traderId == null || fund <= 0) {
      throw new IllegalArgumentException("Invalid input: trader id cannot be null "
          + "and fund must be greater than 0");
    }

    Optional<Account> optionalAccount = accountDao.findById(traderId);
    if (!optionalAccount.isPresent()) {
      throw new IllegalArgumentException("Account not found for id: " + traderId);
    }

    Account account = optionalAccount.get();
    Double currentAmount = account.getAmount();
    account.setAmount(currentAmount + fund);
    accountDao.updateOne(account);

    return account;
  }

  /**
   * Withdraw a fund to an account by traderId
   *
   * @param traderId trader id
   * @param fund amount can't be 0
   * @return updated Account
   * @throws IllegalArgumentException if trader id is null or not found,
   * fund is less or equal to 0, and insufficient fund
   */
  public Account withdraw(Integer traderId, Double fund) {
    if (traderId == null || fund <= 0) {
      throw new IllegalArgumentException("Invalid input: trader id cannot be null "
          + "and fund must be greater than 0");
    }

    Optional<Account> optionalAccount = accountDao.findById(traderId);
    if (!optionalAccount.isPresent()) {
      throw new IllegalArgumentException("Account not found for id: " + traderId);
    }

    Account account = optionalAccount.get();
    Double currentAmount = account.getAmount();

    if (currentAmount - fund < 0) {
      throw new IllegalArgumentException("Insufficient funds");
    }
    account.setAmount(currentAmount - fund);
    accountDao.updateOne(account);

    return account;
  }
}
